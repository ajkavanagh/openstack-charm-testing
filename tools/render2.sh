#!/bin/bash -e

SRC_BUNDLE=$1
COMBOS_DEFAULT="trusty-liberty trusty-mitaka xenial-mitaka"
COMBOS="${2-$COMBOS_DEFAULT}"
WARNING_TXT="# Do not edit this file by hand.  Changes may be lost as it was rendered from another bundle."

function usage() {
  echo -e "
Renders one or more Juju 2 bundles from an old-style multiple-inheritance
bundle.  The source bundle must use "charm: cs:foo" (not branch: foo).

New/updated bundles will be written/overwritten to a "rendered" subdir.

  Syntax:
    ./render-2.sh <bundle> <optional space-separated list of combos>

  Usage examples:
    Render specific inheritance targets from a bundle:
    ./render-2.sh bundles/foo/source_bundle.yaml \"trusty-liberty trusty-mitaka xenial-mitaka\"

    Render the default inheritance targets from a bundle (assumes they exist):
    ./render-2.sh bundles/foo/source_bundle.yaml

    In both of these examples, the rendered files will reside in the
    bundles/foo/rendered/ dir.
"
}

[[ -z "$SRC_BUNDLE" ]] && (usage; exit 1)

if [[ ! -d $HOME/tools/bot-control ]]; then
  mkdir -vp $HOME/tools
  git clone https://github.com/openstack-charmers/bot-control $HOME/tools/bot-control
fi

RENDER_DIR="$(dirname "$SRC_BUNDLE")/rendered"
[[ ! -d "$RENDER_DIR" ]] && mkdir -vp $RENDER_DIR

for COMBO in $COMBOS; do
  # Reduce bundle to once specific inheritance target
  OUT_FILE="$RENDER_DIR/$(basename $SRC_BUNDLE .yaml)-$COMBO.yaml"
  $HOME/tools/bot-control/tools/bundle-reducer -y -i $SRC_BUNDLE -o $OUT_FILE -t $COMBO

  # Add warning comment to top of all rendered files
  sed -i "1i${WARNING_TXT}" $OUT_FILE
done
